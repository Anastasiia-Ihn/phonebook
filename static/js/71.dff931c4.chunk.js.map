{"version":3,"file":"static/js/71.dff931c4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filter.filters;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  justify-content:space-between;\n  flex-direction: column; \n  gap: 15px;\n  padding: 15px;\n  width: 400px;\n  margin-bottom:40px;\n \n \n border: 1px solid #159876;\n  border-radius: 5px;\n    box-shadow: 0px 2px 1px rgba(46, 47, 66, 0.08), 0px 1px 1px rgba(46, 47, 66, 0.16), 0px 1px 6px rgba(46, 47, 66, 0.08);\n`;\n\nexport const FieldForm = styled(Field)`\n  padding: 5px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  font-size: 14px;\n`;\n\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { addContact } from '../../redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { ErrorMsg, FieldForm, StyledForm } from './ContactForm.styled';\nimport { Button } from '../GlobalStyle';\n\nconst builderSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .required('This field is required'),\n  number: Yup.string().min(7, 'Too Short!').required('This field is required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  const onSubmit = (value, form) => {\n    const isElem = listContacts.find(contact => contact.name === value.name);\n\n    if (isElem) {\n      alert(`${value.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(value));\n\n    form.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={builderSchema}\n      onSubmit={onSubmit}\n    >\n      <StyledForm>\n        <label >Name</label>\n        <FieldForm  name=\"name\" placeholder=\"Enter name\" />\n        <ErrorMsg component=\"p\" name=\"name\" />\n        <label >Number</label>\n        <FieldForm  type=\"tel\" name=\"number\" placeholder=\"Enter number\" />\n        <ErrorMsg component=\"p\" name=\"number\" />\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 400px;\n  padding: 15px;\n\n  list-style: square;\n  border: 1px solid #159876;\n  border-radius: 5px;\n    box-shadow: 0px 2px 1px rgba(46, 47, 66, 0.08), 0px 1px 1px rgba(46, 47, 66, 0.16), 0px 1px 6px rgba(46, 47, 66, 0.08);\n`;\n\n\nexport const ListItem = styled.li`\n  display: flex;\n\n  align-items: center;\n  justify-content:space-between;\n  margin-bottom: 10px;\n`;\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem } from './ContactList.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { Button } from 'components/GlobalStyle';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const delContact = idContact => {\n    return dispatch(deleteContact(idContact));\n  };\n\n  return (\n\n      <List>\n        {visibleContacts?.map(({ id, name, number }) => (\n          <ListItem key={id}>\n            <div><p>{name}</p>\n            <p>{number}</p></div>\n            <Button onClick={() => delContact(id)}>Delete</Button>\n          </ListItem>\n        ))}\n      </List>\n \n  );\n};\n","import styled from 'styled-components';\n\nexport const FormInput = styled.form`\n  display: inline-block;\n  \n  width: 300px;\n  padding-left: 40px;\n  margin-bottom: 20px;\n`;\n\nexport const InputStyled = styled.input`\nmargin-top:10px;\n  padding: 5px;\n  width:300px;\n`\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FormInput, InputStyled } from './Filter.styled';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectFilters } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilters) ?? '';\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => dispatch(setFilter(evt.target.value));\n\n  return (\n    <FormInput>\n      <label >Find contacts by name</label>{' '}\n      <InputStyled\n        type=\"text\"\n    \n        name=\"input\"\n        value={filter}\n        onChange={changeFilter}\n      />\n    </FormInput>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContainerStyled = styled.div`\n  margin: 0 auto;\n  width: 800px;\n`;\n\nexport const H1Styled = styled.h1`\n  margin-bottom: 20px;\n`;\n\nexport const H2Styled = styled.h2`\n  margin-bottom: 20px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContainerStyled, H1Styled, H2Styled } from './Contacts.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContainerStyled>\n      <H1Styled>Phonebook</H1Styled>\n      <ContactForm />\n\n      <H2Styled>Contact list</H2Styled>\n      {contacts.length ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <p>You don't have any contact.</p>\n      )}\n    </ContainerStyled>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilters","filter","filters","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","FieldForm","Field","_templateObject2","ErrorMsg","ErrorMessage","_templateObject3","builderSchema","Yup","shape","min","max","required","number","initialValues","ContactForm","dispatch","useDispatch","listContacts","useSelector","_jsx","Formik","validationSchema","onSubmit","value","form","find","alert","concat","addContact","resetForm","children","_jsxs","placeholder","component","type","Button","List","ListItem","ContactList","visibleContacts","map","_ref","id","onClick","idContact","deleteContact","FormInput","InputStyled","Filter","_useSelector","onChange","evt","setFilter","target","ContainerStyled","H1Styled","H2Styled","Contacts","useEffect","fetchContacts","length","_Fragment"],"sourceRoot":""}